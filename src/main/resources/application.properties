#DOCS
    #https://docs.spring.io/spring-boot/docs/1.3.0.RC1/reference/html/common-application-properties.html

#SCOPE PROVIDE
    spring.application.name = application-back
    server.servlet.context-path = /application-back

#RESPONSE WITHOUT TRACE
    server.error.include-stacktrace=never

#PREVINE PROBLEMAS COM O ATRAZO NA DESSERIALIZAO DO JSON
#    spring.jackson.serialization.fail-on-empty-beans=false

# PORT
    server.port = 3128
    spring.jackson.date-format=yyyy-MM-dd
#    spring.profiles.active = dev

# DATASOURCE
    spring.datasource.url= jdbc:postgresql://localhost:5432/synoptic_observation
    spring.datasource.username= postgres
    spring.datasource.password= G@delha
    #spring.datasource.url=jdbc:h2:file:/path/synopticObservation
    #spring.datasource.url=jdbc:h2:mem:synopticObservation
    #spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.driver-class-name = org.postgresql.Driver
    spring.datasource.platform= postgres
    spring.datasource.initialization-mode= always

# JPA - Java Persistence API
    spring.jpa.database= POSTGRESQL
    spring.jpa.show-sql= false
    spring.jpa.properties.hibernate.dialect= org.hibernate.spatial.dialect.postgis.PostgisDialect
    spring.jpa.properties.hibernate.default_schema= synoptic_observation

# DA PARA A PRIMEIRA VEZ QUE RODAR, UTILICAR "create" PARA CRIAR A: hibernate_sequence
#    spring.jpa.hibernate.ddl-auto= create
    spring.jpa.hibernate.ddl-auto= update

#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type=TRACE

# JPA - Java Persistence API
    #spring.jpa.database-platform= org.hibernate.dialect.H2Dialect
    #spring.data.jpa.repositories.bootstrap-mode= default

# H2 - Banco de Dados
    #spring.h2.console.enabled=true
    #spring.h2.console.path=/h2-ui
    ##spring.h2.console.settings.trace=false
    ##spring.h2.console.settings.web-allow-others=false

# THYMELEAF
#    spring.thymeleaf.cache=false
#    spring.thymeleaf.enabled=true
#    spring.thymeleaf.prefix=classpath:/templates/
#    spring.thymeleaf.suffix=.html

# App Properties
#    gadelha.eti.adminRole= administrator
    gadelha.app.jwtSecret= gadelhaSecretKey
    gadelha.app.jwtExpirationMs= 604800000
    gadelha.app.jwtRefreshExpirationMs= 12000000

# ESCONDENDO ERROS COM SPRING BOOT
#    server.error.whitelabel.enabled=false
#    server.error.include-message=always

# ENDPOINTS
    management.endpoint.shutdown.enabled=true
    management.endpoints.web.exposure.include=*
    #management.endpoints.exposure.exclude=env, bars

    ## ENDPOINT: INFO
        info.app.name=@project.name@
        info.app.groupId=@project.groupId@
        info.app.artifactId=@project.artifactId@
        info.app.version=@project.version@

        management.info.git.mode=full

## APP PROPERTIES
    BASE_PACKAGE = br.eti.gadelha
    TITLE = Api Documentation
    DESCRIPTION = API Manager
    VERSION = 1.0.0
    CONTACT_NAME = Marcelo Gadelha
    CONTACT_URL = github.com/gadelhati
    CONTACT_EMAIL = gadelha.ti@gmail.com

    ## API RESPONSES, REFERENCES: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
        response.200 = OK. The request has succeeded.
        response.201 = The request has succeeded and a new resource has been created as a result. This is typically the response sent after POST requests, or some PUT requests.
        response.202 = The request has been received but not yet acted upon. It is noncommittal, since there is no way in HTTP to later send an asynchronous response indicating the outcome of the request. It is intended for cases where another process or server handles the request, or for batch processing.
        response.204 = There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
        response.304 = This is used for caching purposes. It tells the client that the response has not been modified, so the client can continue to use the same cached version of the response.
        response.400 = The server could not understand the request due to invalid syntax.
        response.401 = Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
        response.403 = The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401, the client's identity is known to the server.
        response.404 = The server can not find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurrence on the web.

#upload
    spring.servlet.multipart.enabled=true
    spring.servlet.multipart.file-size-threshold=2KB
    spring.servlet.multipart.max-file-size=200MB
    spring.servlet.multipart.max-request-size=215MB
    file.upload-dir=./uploads